# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:28:57+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import (
    APIKeyHeader,
    BaseSecurity,
    UnsuportedSecurityStub,
)
from fastapi import Header, UploadFile

from models import (
    AdminCreateCorpusRequest,
    AdminCreateCorpusResponse,
    AdminDeleteCorpusRequest,
    AdminDeleteCorpusResponse,
    AdminListCorporaRequest,
    AdminListCorporaResponse,
    AdminResetCorpusRequest,
    AdminResetCorpusResponse,
    GooglerpcStatus,
    ServingBatchQueryRequest,
    ServingBatchQueryResponse,
    V1StreamQueryPostResponse,
    V1UploadPostResponse,
    V1UploadPostResponse1,
    VectaraDeleteDocumentRequest,
    VectaraDeleteDocumentResponse,
    VectaraIndexDocumentRequest,
    VectaraIndexDocumentResponse,
)

app = MCPProxy(
    contact={
        'email': 'support@vectara.com',
        'name': 'Vectara Support',
        'url': 'http://support.vectara.com/',
    },
    description='Vectara is a neural search platform, built for developers to get the most out of their data.\n\nYou can sign up for an account at [https://vectara.com](https://vectara.com).',
    termsOfService='https://vectara.com/legal/online-customer-agreement/',
    title='Vectara REST API',
    version='1.0.0',
    servers=[{'url': 'https://api.vectara.io'}],
)


@app.post(
    '/v1/create-corpus',
    description=""" Create Corpus """,
    tags=['corpus_administration'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_corpus(
    customer_id: int = Header(..., alias='customer-id'),
    body: AdminCreateCorpusRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/delete-corpus',
    description=""" Delete Corpus """,
    tags=['corpus_administration', 'document_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_corpus(
    customer_id: int = Header(..., alias='customer-id'),
    body: AdminDeleteCorpusRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/delete-doc',
    description=""" Delete """,
    tags=['document_management', 'corpus_administration'],
    security=[
        APIKeyHeader(name="x-api-key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete(
    customer_id: int = Header(..., alias='customer-id'),
    body: VectaraDeleteDocumentRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/index',
    description=""" Index """,
    tags=['document_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def index(
    customer_id: int = Header(..., alias='customer-id'),
    body: VectaraIndexDocumentRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/list-corpora',
    description=""" List Corpora """,
    tags=['corpus_administration'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def list_corpora(
    customer_id: int = Header(..., alias='customer-id'),
    body: AdminListCorporaRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/query',
    description=""" Query """,
    tags=['query_execution'],
    security=[
        APIKeyHeader(name="x-api-key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def query(
    customer_id: int = Header(..., alias='customer-id'),
    body: ServingBatchQueryRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/reset-corpus',
    description=""" Reset Corpus """,
    tags=['corpus_administration'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def reset_corpus(
    customer_id: int = Header(..., alias='customer-id'),
    body: AdminResetCorpusRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/stream-query',
    description=""" Stream Query """,
    tags=['query_execution'],
    security=[
        APIKeyHeader(name="x-api-key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def stream_query(
    customer_id: int = Header(..., alias='customer-id'),
    body: ServingBatchQueryRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/upload',
    description=""" File Upload """,
    tags=['file_upload_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def file_upload(c: int, o: int = ..., d: Optional[bool] = None, file: UploadFile = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
