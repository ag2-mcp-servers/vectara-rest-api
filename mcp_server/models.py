# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:28:57+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class CorpusKeySemantics(Enum):
    DEFAULT = 'DEFAULT'
    QUERY = 'QUERY'
    RESPONSE = 'RESPONSE'


class QueryRequestRerankingConfig(BaseModel):
    rerankerId: Optional[int] = Field(
        None,
        title='Which reranking model to use if reranking.  Currently, the only ID\navailable is ID 272725717',
    )


class AdminDeleteCorpusRequest(BaseModel):
    corpusId: Optional[int] = Field(None, description='The Corpus ID to be deleted.')
    customerId: Optional[int] = Field(
        None, description='The Customer ID that contains the corpus to be deleted.'
    )


class AdminDimension(BaseModel):
    description: Optional[str] = Field(
        None, description='A description for the custom dimension.'
    )
    indexingDefault: Optional[float] = Field(
        None,
        description='The default value to give to documents for this custom dimension.',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the custom dimension.  The maximum length of the name is\n8 characters.',
    )
    servingDefault: Optional[float] = Field(
        None,
        description='The default weight to give this dimension when running queries. A value of\n0.0, for example, gives it no weight at all.',
    )


class AdminFilterAttributeLevel(Enum):
    FILTER_ATTRIBUTE_LEVEL__UNDEFINED = 'FILTER_ATTRIBUTE_LEVEL__UNDEFINED'
    FILTER_ATTRIBUTE_LEVEL__DOCUMENT = 'FILTER_ATTRIBUTE_LEVEL__DOCUMENT'
    FILTER_ATTRIBUTE_LEVEL__DOCUMENT_PART = 'FILTER_ATTRIBUTE_LEVEL__DOCUMENT_PART'


class AdminFilterAttributeType(Enum):
    FILTER_ATTRIBUTE_TYPE__UNDEFINED = 'FILTER_ATTRIBUTE_TYPE__UNDEFINED'
    FILTER_ATTRIBUTE_TYPE__INTEGER = 'FILTER_ATTRIBUTE_TYPE__INTEGER'
    FILTER_ATTRIBUTE_TYPE__INTEGER_LIST = 'FILTER_ATTRIBUTE_TYPE__INTEGER_LIST'
    FILTER_ATTRIBUTE_TYPE__REAL = 'FILTER_ATTRIBUTE_TYPE__REAL'
    FILTER_ATTRIBUTE_TYPE__REAL_LIST = 'FILTER_ATTRIBUTE_TYPE__REAL_LIST'
    FILTER_ATTRIBUTE_TYPE__TEXT = 'FILTER_ATTRIBUTE_TYPE__TEXT'
    FILTER_ATTRIBUTE_TYPE__TEXT_LIST = 'FILTER_ATTRIBUTE_TYPE__TEXT_LIST'


class AdminListCorporaRequest(BaseModel):
    filter: Optional[str] = Field(None, description='A regex to match corpora against.')
    numResults: Optional[int] = Field(
        None, description='The maximum results to return.'
    )
    pageKey: Optional[str] = Field(
        None,
        description='A key that is passed in to retrieve a specific page of results.',
    )


class AdminResetCorpusRequest(BaseModel):
    corpusId: Optional[int] = Field(None, description='The Corpus ID to be reset.')
    customerId: Optional[int] = Field(
        None, description='The Customer ID that contains the corpus to be reset.'
    )


class ProtobufAny(BaseModel):
    typeUrl: Optional[str] = Field(
        None,
        description='A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none "/" character. The last segment of the URL\'s path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading "." is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n\n\n\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n\n\n\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.',
    )
    value: Optional[str] = Field(
        None,
        description='Must be a valid serialized protocol buffer of the above specified type.',
    )


class ServingAttribute(BaseModel):
    name: Optional[str] = None
    value: Optional[str] = None


class ServingPerformanceMetrics(BaseModel):
    queryEncodeMs: Optional[int] = Field(
        None, description='How long it took to encode the query.'
    )
    rerankMs: Optional[int] = Field(
        None, description='How long it took to rerank the results.'
    )
    retrievalMs: Optional[int] = Field(
        None, description='How long it took to retrieve relevant results.'
    )
    userdataRetrievalMs: Optional[int] = Field(
        None, description='How long it took to retrieve user data.'
    )


class ServingResponseSetDocument(BaseModel):
    id: Optional[str] = None
    metadata: Optional[List[ServingAttribute]] = None


class VectaraDeleteDocumentRequest(BaseModel):
    corpusId: Optional[str] = Field(
        None, description='The Corpus ID that contains the document.'
    )
    customerId: Optional[str] = Field(
        None, description='The Customer ID to issue the request for.'
    )
    documentId: Optional[str] = Field(
        None, description='The Document ID to be deleted.'
    )


class VectaraDeleteDocumentResponse(BaseModel):
    pass


class VectaraStatusCode(Enum):
    OK = 'OK'
    FAILURE = 'FAILURE'
    UNKNOWN = 'UNKNOWN'
    INVALID_ARGUMENT = 'INVALID_ARGUMENT'
    DEADLINE_EXCEEDED = 'DEADLINE_EXCEEDED'
    ALREADY_EXISTS = 'ALREADY_EXISTS'
    PERMISSION_DENIED = 'PERMISSION_DENIED'
    RESOURCE_EXHAUSTED = 'RESOURCE_EXHAUSTED'
    FAILED_PRECONDITION = 'FAILED_PRECONDITION'
    ABORTED = 'ABORTED'
    OUT_OF_RANGE = 'OUT_OF_RANGE'
    UNIMPLEMENTED = 'UNIMPLEMENTED'
    INTERNAL = 'INTERNAL'
    UNAVAILABLE = 'UNAVAILABLE'
    DATA_LOSS = 'DATA_LOSS'
    UNAUTHENTICATED = 'UNAUTHENTICATED'
    BAD_REQUEST = 'BAD_REQUEST'
    UNAUTHORIZED = 'UNAUTHORIZED'
    FORBIDDEN = 'FORBIDDEN'
    NOT_FOUND = 'NOT_FOUND'
    METHOD_NOT_ALLOWED = 'METHOD_NOT_ALLOWED'
    CONFLICT = 'CONFLICT'
    UNSUPPORTED_MEDIA_TYPE = 'UNSUPPORTED_MEDIA_TYPE'
    TOO_MANY_REQUESTS = 'TOO_MANY_REQUESTS'
    INTERNAL_SERVER_ERROR = 'INTERNAL_SERVER_ERROR'
    NOT_IMPLEMENTED = 'NOT_IMPLEMENTED'
    SERVICE_UNAVAILABLE = 'SERVICE_UNAVAILABLE'
    INSUFFICIENT_STORAGE = 'INSUFFICIENT_STORAGE'
    UNPARSEABLE_RESPONSE = 'UNPARSEABLE_RESPONSE'
    DISABLED_CUSTOMER = 'DISABLED_CUSTOMER'
    INVALID_CUSTOMER_ID = 'INVALID_CUSTOMER_ID'
    DISABLED_CORPUS = 'DISABLED_CORPUS'
    INVALID_CORPUS_ID = 'INVALID_CORPUS_ID'
    DISABLED_API_KEY = 'DISABLED_API_KEY'
    EXPIRED_API_KEY = 'EXPIRED_API_KEY'
    INVALID_API_KEY = 'INVALID_API_KEY'
    CMK_INACCESSIBLE = 'CMK_INACCESSIBLE'
    QRY__DISABLED_CORPUS = 'QRY__DISABLED_CORPUS'
    QRY__DOCUMENT_DB_FAILURE = 'QRY__DOCUMENT_DB_FAILURE'
    QRY__ENCODER_FAILURE = 'QRY__ENCODER_FAILURE'
    QRY__INTERRUPTED = 'QRY__INTERRUPTED'
    QRY__INVALID_CORPUS = 'QRY__INVALID_CORPUS'
    QRY__INVALID_START = 'QRY__INVALID_START'
    QRY__INVALID_NUM_RESULTS = 'QRY__INVALID_NUM_RESULTS'
    QRY__INVALID_CONTEXT = 'QRY__INVALID_CONTEXT'
    QRY__MISSING_QUERY = 'QRY__MISSING_QUERY'
    QRY__MISSING_CORPUS = 'QRY__MISSING_CORPUS'
    QRY__TIMEOUT = 'QRY__TIMEOUT'
    QRY__TOO_MANY_CORPORA = 'QRY__TOO_MANY_CORPORA'
    QRY__TOO_MANY_QUERIES = 'QRY__TOO_MANY_QUERIES'
    QRY__VECTOR_INDEX_FAILURE = 'QRY__VECTOR_INDEX_FAILURE'
    QRY__INVALID_DIMENSION = 'QRY__INVALID_DIMENSION'
    QRY__INVALID_CLIENTKEY = 'QRY__INVALID_CLIENTKEY'
    QRY__DECRYPTION_FAILURE = 'QRY__DECRYPTION_FAILURE'
    QRY__INVALID_RERANKER = 'QRY__INVALID_RERANKER'
    QRY__PARTIAL_RERANK = 'QRY__PARTIAL_RERANK'
    QRY__RERANK_FAILURE = 'QRY__RERANK_FAILURE'
    QRY__TOO_MANY_RESULT_ROWS = 'QRY__TOO_MANY_RESULT_ROWS'
    QRY__PARTIAL_RETRIEVAL = 'QRY__PARTIAL_RETRIEVAL'
    CX_SPECS__INVALID_JSON = 'CX_SPECS__INVALID_JSON'
    CX_SPECS__UNREGISTERED_TYPE = 'CX_SPECS__UNREGISTERED_TYPE'
    CX_SPECS__MISSING_SPEC = 'CX_SPECS__MISSING_SPEC'
    CX_SPECS__MISSING_TYPE = 'CX_SPECS__MISSING_TYPE'
    CX_SPECS__UNPARSEABLE_SPEC = 'CX_SPECS__UNPARSEABLE_SPEC'
    ADM__INVALID_CUSTOMER_ID = 'ADM__INVALID_CUSTOMER_ID'
    ADM__INVALID_CORPUS_ID = 'ADM__INVALID_CORPUS_ID'
    ADM__INVALID_ENCODER_ID = 'ADM__INVALID_ENCODER_ID'
    ADM__INVALID_ROLE_ID = 'ADM__INVALID_ROLE_ID'
    ADM__ROLE_ALREADY_EXISTS = 'ADM__ROLE_ALREADY_EXISTS'
    ADM__ONLY_ONE_OWNER_SUPPORTED = 'ADM__ONLY_ONE_OWNER_SUPPORTED'
    ADM__INVALID_PERMISSION = 'ADM__INVALID_PERMISSION'
    ADM__ROLECREATION_FAILURE = 'ADM__ROLECREATION_FAILURE'
    ADM__USER_EMAIL_NOT_AVAIALBLE = 'ADM__USER_EMAIL_NOT_AVAIALBLE'
    ADM__USERNAME_NOT_AVAILABLE = 'ADM__USERNAME_NOT_AVAILABLE'
    ADM__SIGNUP_MISSING_NAME = 'ADM__SIGNUP_MISSING_NAME'
    ADM__SIGNUP_MISSING_ORG = 'ADM__SIGNUP_MISSING_ORG'
    ADM__SIGNUP_MISSING_EMAIL = 'ADM__SIGNUP_MISSING_EMAIL'
    ADM__SIGNUP_MISSING_PAYMENT = 'ADM__SIGNUP_MISSING_PAYMENT'
    ADM__SIGNUP_MISSING_PLAN = 'ADM__SIGNUP_MISSING_PLAN'
    ADM__SIGNUP_MISSING_PASSWORD = 'ADM__SIGNUP_MISSING_PASSWORD'
    ADM__SIGNUP_INVALID_NAME = 'ADM__SIGNUP_INVALID_NAME'
    ADM__SIGNUP_INVALID_ORG = 'ADM__SIGNUP_INVALID_ORG'
    ADM__SIGNUP_INVALID_EMAIL = 'ADM__SIGNUP_INVALID_EMAIL'
    ADM__SIGNUP_INVALID_PAYMENT = 'ADM__SIGNUP_INVALID_PAYMENT'
    ADM__SIGNUP_INVALID_PLAN = 'ADM__SIGNUP_INVALID_PLAN'
    ADM__SIGNUP_INVALID_PASSWORD = 'ADM__SIGNUP_INVALID_PASSWORD'
    ADM__SIGNUP_INVALID_ACCOUNT_ALIAS = 'ADM__SIGNUP_INVALID_ACCOUNT_ALIAS'
    ADM__SIGNUP_INVALID_EMAIL_VALIDATION_CODE = (
        'ADM__SIGNUP_INVALID_EMAIL_VALIDATION_CODE'
    )
    ADM__SIGNUP_MISSING_COUNTRY_CODE = 'ADM__SIGNUP_MISSING_COUNTRY_CODE'
    ADM__SIGNUP_ROOT_EMAIL_NOT_AVAILABLE = 'ADM__SIGNUP_ROOT_EMAIL_NOT_AVAILABLE'
    ADM__CUST_MARK_DELETE_FAILED = 'ADM__CUST_MARK_DELETE_FAILED'
    ADM__CUST_FAISS_DEALLOC_FAILED = 'ADM__CUST_FAISS_DEALLOC_FAILED'
    ADM__CORPUS_LIMIT_REACHED = 'ADM__CORPUS_LIMIT_REACHED'
    ADM__STRIPE_CARD_DECLINED = 'ADM__STRIPE_CARD_DECLINED'
    ADM__STRIPE_PROCESSING_ERROR = 'ADM__STRIPE_PROCESSING_ERROR'
    ADM__EMAIL_VALIDATION_REQUEST_NOT_FOUND = 'ADM__EMAIL_VALIDATION_REQUEST_NOT_FOUND'
    ADM__EMAIL_NOT_VALIDATED = 'ADM__EMAIL_NOT_VALIDATED'
    ADM__CHANGE_PLAN__NO_CURRENT_PLAN = 'ADM__CHANGE_PLAN__NO_CURRENT_PLAN'
    ADM__CHANGE_PLAN__REQUIRES_MANUAL_CHANGE = (
        'ADM__CHANGE_PLAN__REQUIRES_MANUAL_CHANGE'
    )
    ADM__CHANGE_PLAN__INVALID_PLAN_ID = 'ADM__CHANGE_PLAN__INVALID_PLAN_ID'
    ADM__CHANGE_PLAN__NO_PAYMENT_SOURCE = 'ADM__CHANGE_PLAN__NO_PAYMENT_SOURCE'
    ADM__CHANGE_PLAN__INVALID_EFFECTIVE_DATE = (
        'ADM__CHANGE_PLAN__INVALID_EFFECTIVE_DATE'
    )
    ADM__CHANGE_PLAN__CONFLICTING_CHANGE = 'ADM__CHANGE_PLAN__CONFLICTING_CHANGE'
    SCM__MISCONFIGURED_CONNECTION = 'SCM__MISCONFIGURED_CONNECTION'
    STATS_DB_READ_FAILURE = 'STATS_DB_READ_FAILURE'
    VDB__TEXT_READ_FAILURE = 'VDB__TEXT_READ_FAILURE'
    REBUILD__LOW_RECALL = 'REBUILD__LOW_RECALL'
    REBUILD__INDEX_UPLOAD_FAILURE = 'REBUILD__INDEX_UPLOAD_FAILURE'
    REBUILD__UPDATE_JOURNAL_FAILURE = 'REBUILD__UPDATE_JOURNAL_FAILURE'
    REBUILD__UPDATE_FAISSPARAMS_FAILURE = 'REBUILD__UPDATE_FAISSPARAMS_FAILURE'
    REBUILD__NO_DATA = 'REBUILD__NO_DATA'
    REBUILD__EVALUATION = 'REBUILD__EVALUATION'
    IDX__TRANSIENT_PARTIAL_DELETION_FAILURE = 'IDX__TRANSIENT_PARTIAL_DELETION_FAILURE'
    IDX__PERMANENT_PARTIAL_DELETION_FAILURE = 'IDX__PERMANENT_PARTIAL_DELETION_FAILURE'


class VectaraStorageQuota(BaseModel):
    numChars: Optional[str] = Field(
        None,
        description='The number of chars from the document that consumed the storage quota.',
    )
    numMetadataChars: Optional[str] = Field(
        None,
        description='The number of chars in the metadata of the document that consumed the\nstorage quota.',
    )


class VectaraindexingCustomDimension(BaseModel):
    name: Optional[str] = Field(None, description='The name of the dimension.')
    value: Optional[float] = Field(None, description='The value of the dimension.')


class VectaraservingCustomDimension(BaseModel):
    name: Optional[str] = None
    weight: Optional[float] = None


class V1UploadPostRequest(BaseModel):
    doc_metadata: Optional[str] = Field(
        None,
        description='A JSON string of any additional metadata you want attached to the file.',
    )
    file: Optional[bytes] = Field(
        None, description='The file to be indexed into Vectara.'
    )


class QuotaConsumed(BaseModel):
    numChars: Optional[str] = Field(
        None,
        description='The number of characters Vectara indexed from the file uploaded.',
    )
    numMetadataChars: Optional[str] = Field(
        None,
        description='The number of metadata characters Vectara indexed from the file uploaded.',
    )


class Response(BaseModel):
    quotaConsumed: Optional[QuotaConsumed] = None
    status: Optional[Dict[str, Any]] = None


class V1UploadPostResponse(BaseModel):
    response: Optional[Response] = None


class V1UploadPostResponse1(BaseModel):
    httpCode: Optional[int] = Field(None, description='Returned HTTP code')


class AdminFilterAttribute(BaseModel):
    description: Optional[str] = Field(None, description='An optional description.')
    indexed: Optional[bool] = Field(
        None, description='Whether the field is indexed for maximum query speed.'
    )
    level: Optional[AdminFilterAttributeLevel] = 'FILTER_ATTRIBUTE_LEVEL__UNDEFINED'
    name: Optional[str] = Field(
        None, description='Name of the field, as seen in metadata.'
    )
    type: Optional[AdminFilterAttributeType] = 'FILTER_ATTRIBUTE_TYPE__UNDEFINED'


class ComvectaraStatus(BaseModel):
    code: Optional[VectaraStatusCode] = 'OK'
    statusDetail: Optional[str] = None


class GooglerpcStatus(BaseModel):
    code: Optional[int] = None
    details: Optional[List[ProtobufAny]] = None
    message: Optional[str] = None


class IndexingSection(BaseModel):
    customDims: Optional[List[VectaraindexingCustomDimension]] = Field(
        None,
        description='A list of custom dimension values that are included in the generated\nrepresentation of all subsections (i.e. sections contains by this section).',
    )
    id: Optional[int] = Field(
        None,
        description='Optionally, the unique ID of this section. If set, it will be returned as\nmetadata in query results.',
    )
    metadataJson: Optional[str] = Field(
        None,
        description='Metadata about this section. This should be a json string. It is passed\nthrough the system, without being used at indexing time. It can be\nretrieved at query time.',
    )
    section: Optional[List[IndexingSection]] = Field(
        None, description='A list of subsections.'
    )
    text: Optional[str] = Field(
        None, description='The text of the section. This should never be empty.'
    )
    title: Optional[str] = Field(
        None, description='Optionally, the title of the section. This may be empty.'
    )


class ServingCorpusKey(BaseModel):
    corpusId: Optional[int] = Field(None, description='The Corpus ID.')
    customerId: Optional[int] = Field(None, description='The Customer ID.')
    dim: Optional[List[VectaraservingCustomDimension]] = Field(
        None, description='Weights on custom dimensions for the corpus.'
    )
    metadataFilter: Optional[str] = None
    semantics: Optional[CorpusKeySemantics] = 'DEFAULT'


class ServingQueryRequest(BaseModel):
    corpusKey: Optional[List[ServingCorpusKey]] = None
    numResults: Optional[int] = Field(
        None, description='The number of results to return.'
    )
    query: Optional[str] = Field(
        None, description='The query text to use from the end user.'
    )
    rerankingConfig: Optional[QueryRequestRerankingConfig] = None
    start: Optional[int] = Field(None, title='The start position in the result set')


class ServingResponse(BaseModel):
    corpusKey: Optional[ServingCorpusKey] = None
    documentIndex: Optional[int] = Field(
        None, description='Use this ID to find the document in the ResponseSet.'
    )
    metadata: Optional[List[ServingAttribute]] = None
    score: Optional[float] = Field(
        None,
        description='The score used for ranking results.  The higher the score, the better the match.',
    )
    text: Optional[str] = None


class ServingResponseSet(BaseModel):
    document: Optional[List[ServingResponseSetDocument]] = None
    response: Optional[List[ServingResponse]] = None
    status: Optional[List[ComvectaraStatus]] = Field(
        None, description='Potentially multiple warnings.'
    )


class VectaraIndexDocumentResponse(BaseModel):
    quotaConsumed: Optional[VectaraStorageQuota] = None
    status: Optional[ComvectaraStatus] = None


class VectaraindexingDocument(BaseModel):
    customDims: Optional[List[VectaraindexingCustomDimension]] = Field(
        None,
        description='A list of custom dimension values that are included in the generated\nrepresentation of all sections.',
    )
    description: Optional[str] = Field(
        None, description='An optional description for the document.'
    )
    documentId: Optional[str] = Field(
        None, description='Client assigned document ID to this document.'
    )
    metadataJson: Optional[str] = Field(
        None,
        description='Metadata about the document. This should be a json string, and it can be\nretrieved at query time.',
    )
    section: Optional[List[IndexingSection]] = Field(
        None,
        description='The actual content of the document, structured as a repeating list\nof sections.',
    )
    title: Optional[str] = Field(None, description='The title of the document.')


class V1StreamQueryPostResponse(BaseModel):
    error: Optional[GooglerpcStatus] = None
    result: Optional[ServingResponseSet] = None


class AdminCorpus(BaseModel):
    customDimensions: Optional[List[AdminDimension]] = None
    description: Optional[str] = Field(
        None, description='A description for the corpus.'
    )
    dtProvision: Optional[str] = Field(
        None, description='The time at which the corpus was provisioned.'
    )
    enabled: Optional[bool] = Field(
        None, description='Whether the corpus is enabled for use or not.'
    )
    encoderId: Optional[str] = Field(
        None,
        description='This is an advanced setting for changing the underlying model type.  The\ndefault value is "1", which is Vectara\'s high-performing global model.\nUnderlying models may be swapped for some paying customers by contacting\nour support team.',
    )
    encrypted: Optional[bool] = Field(
        None, description='Encryption is on by default and cannot be turned off.'
    )
    filterAttributes: Optional[List[AdminFilterAttribute]] = None
    id: Optional[int] = Field(None, description='The Corpus ID.')
    metadataMaxBytes: Optional[int] = Field(
        None,
        description='An optional maximum size of the metadata that each document can contain.',
    )
    name: Optional[str] = Field(None, description='The name of the corpus.')
    swapIenc: Optional[bool] = Field(
        None,
        description='The default query encoder is designed for normal question-answering types\nof queries when the text contains the answer.  Swapping the index encoder\nis generally rare, but can be used to help directly match questions to\nquestions.  This can be useful if you have a FAQ dataset and you want to\ndirectly match the user question to the question in the FAQ.',
    )
    swapQenc: Optional[bool] = None
    textless: Optional[bool] = Field(
        None,
        description='When a corpus is "textless", Vectara does not store the original text.\nInstead, Vectara converts the text to vectors and only retains metadata.',
    )


class AdminCreateCorpusRequest(BaseModel):
    corpus: Optional[AdminCorpus] = None


class AdminCreateCorpusResponse(BaseModel):
    corpusId: Optional[int] = Field(None, description='The Corpus ID that was created.')
    status: Optional[ComvectaraStatus] = None


class AdminDeleteCorpusResponse(BaseModel):
    status: Optional[ComvectaraStatus] = None


class AdminListCorporaResponse(BaseModel):
    corpus: Optional[List[AdminCorpus]] = None
    pageKey: Optional[str] = Field(
        None,
        description='A key that is passed into a subsequent result in order to\nretrieve the next page of results.',
    )
    status: Optional[ComvectaraStatus] = None


class AdminResetCorpusResponse(BaseModel):
    status: Optional[ComvectaraStatus] = None


class ServingBatchQueryRequest(BaseModel):
    query: Optional[List[ServingQueryRequest]] = None


class ServingBatchQueryResponse(BaseModel):
    metrics: Optional[ServingPerformanceMetrics] = None
    responseSet: Optional[List[ServingResponseSet]] = None
    status: Optional[List[ComvectaraStatus]] = None


class VectaraIndexDocumentRequest(BaseModel):
    corpusId: Optional[str] = None
    customerId: Optional[str] = None
    document: Optional[VectaraindexingDocument] = None


IndexingSection.model_rebuild()
